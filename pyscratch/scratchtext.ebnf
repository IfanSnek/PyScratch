%import common.ESCAPED_STRING   -> STRING
%import common.SIGNED_NUMBER    -> NUMBER
%import common.WORD             -> WORD

// Our entry point, which parses a single file, if made up of as many blocks as needed
start: block+

// A block is either A) As many occurrences words or parameters as needed, B) A loop, or C) a newline.
block: (WORD | param )+ | loop | _NL

// A parameter is a block, number, or string, any of which must be surrounded by parenthesis.
param: "(" ( block | NUMBER | STRING ) ")"

// A loop is As many occurrences words or parameters as needed, plus as many blocks and newlines as needed
// (surrounded by parenthesis. There may be an optional word at the end.
loop: (WORD | param)+ "{" (block _NL?)+ "}" WORD?

%import common.NEWLINE -> _NL
%import common.WS_INLINE
%ignore WS_INLINE